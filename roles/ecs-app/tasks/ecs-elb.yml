---

- name: Ensure we have elb data defined
  assert:
    that:
      - elbdata is defined
      - elb_name is defined

- name: Are we including our nat_gw in our sources
  set_fact:
    use_nat_gw: elbdata.elb_sg.use_nat_gw

- block:
    - block:
        - name: Lookup client group id
          ec2_group_facts:
            filters:
              "tag:Stack": "{{ target }}"
          register: elb_client_sg_id

        - name: Create security group for elb
          ec2_group:
            name: "{{ elbdata.elb_sg.name }}"
            description: "{{ elbdata.elb_sg.desc }}"
            rules: "{{ elbdata.elb_sg.ruleset | rules_from_dict(elb_client_sg_id.security_groups, elbdata.elb_sg.client_sg) }}"
            rules_egress: []
            vpc_id: "{{ vpc_id }}"
          register: elb_security_group_1
      when: elbdata.elb_sg.client_sg is defined

    - block:
        - name: Create security group for elb
          ec2_group:
            name: "{{ elbdata.elb_sg.name }}"
            description: "{{ elbdata.elb_sg.desc }}"
            rules: "{{ elbdata.elb_sg.ruleset | rules_from_dict(nat_gw_src=nat_gw_public_ip + '/32', use_nat_gw=use_nat_gw) }}"
            rules_egress: []
            vpc_id: "{{ vpc_id }}"
          register: elb_security_group_2

      when: elbdata.elb_sg.client_sg is not defined

    - name: Add tags until 2.2
      ec2_tag:
        resource: "{{ elb_security_group_2.group_id | default(elb_security_group_1.group_id) }}"
        state: present
        tags: "{{ vpc.env_tags | combine({'Name': elbdata.elb_sg.name}) }}"

  when: elbdata.elb_sg is defined

- name: Setup SSL certs for internal ELBS
  include: add-ssl-cert.yml
  when: elbdata.type is defined

- name: Create ELB for app
  ec2_elb_lb:
    state: present
    subnets: "{{ elbdata.subnets }}"
    purge_subnets: True
    name: "{{ elb_name }}-{{ opg_data.stack }}"
    tags: "{{ vpc.env_tags | combine({ 'Name': elb_name + '-' + opg_data.stack}) }}"
    scheme: "{{ elbdata.type | default(omit) }}"
    listeners: "{{ elbdata.listeners }}"
    health_check: "{{ elbdata.health_check }}"
    security_group_names: "{{ elbdata.sg }}"
    cross_az_load_balancing: yes
  register: app_elb

- name: Create cloudwatch alarm for elb
  ec2_metric_alarm:
    state: present
    name: "{{ elbdata.alarm.name|default(elb_name + '-' + opg_data.stack) }}"
    metric: "{{ elbdata.alarm.metric }}"
    namespace: "AWS/ELB"
    statistic: "{{ elbdata.alarm.statistic|default('Average') }}"
    comparison: "{{ elbdata.alarm.comparison|default('==') }}"
    threshold: "{{ elbdata.alarm.theshold|default('1') }}"
    period: "{{ elbdata.alarm.period|default('60') }}"
    evaluation_periods: "{{ elbdata.alarm.eval_periods|default('2') }}"
    description: "{{ elbdata.alarm.description|default('ELB Check for ' + elb_name + '-' + opg_data.stack) }}"
    dimensions: {'LoadBalancerName': '{{ elb_name }}-{{ opg_data.stack }}'}
    alarm_actions: "{{ elbdata.alarm.actions|default([]) }}"
  when: elbdata.alarm is defined

- block:
    - name: Add route53 Public entry for elb
      route53:
        command: create
        overwrite: yes
        record: "{{ elbdata.public_dns }}.{{ opg_data.domain }}."
        zone: "{{ opg_data.domain }}."
        type: A
        alias: True
        value: "{{ app_elb.elb.dns_name }}"
        alias_hosted_zone_id: "{{ app_elb.elb.hosted_zone_id }}"
        ttl: 60

    - name: Add cname records for external elb
      route53:
        command: create
        overwrite: yes
        record: "{{ item }}.{{ opg_data.domain }}."
        zone: "{{ opg_data.domain }}."
        type: A
        alias: True
        value: "{{ app_elb.elb.dns_name }}"
        alias_hosted_zone_id: "{{ app_elb.elb.hosted_zone_id }}"
        ttl: 60
      when: elbdata.dns_aliases is defined
      with_items: "{{ elbdata.dns_aliases|default([]) }}"

  when: elbdata.public_dns is defined

- block:
    - name: Add route53 private entry for elb
      route53:
        command: create
        overwrite: yes
        record: "{{ elbdata.private_dns }}.internal."
        zone: "{{ opg_data.stack }}.internal."
        private_zone: yes
        type: A
        alias: True
        value: "{{ app_elb.elb.dns_name }}"
        alias_hosted_zone_id: "{{ app_elb.elb.hosted_zone_id }}"
        ttl: 60
    - name: Add route53 cname private entries for elb
      route53:
        command: create
        overwrite: yes
        record: "{{ item }}.internal."
        zone: "{{ opg_data.stack }}.internal."
        private_zone: yes
        type: A
        alias: True
        value: "{{ app_elb.elb.dns_name }}"
        alias_hosted_zone_id: "{{ app_elb.elb.hosted_zone_id }}"
        ttl: 60
      when: elbdata.dns_aliases is defined
      with_items: "{{ elbdata.dns_aliases|default([]) }}"

  when: elbdata.private_dns is defined
