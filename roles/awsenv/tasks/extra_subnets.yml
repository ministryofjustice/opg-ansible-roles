---

#- name: Find our extra public subnets
#  set_fact:
#    extra_public_subnets: "{{ extra_public_subnets|default([]) }} + [{{ subnets.results | selectattr('subnet.tags.Name', 'match', '^' + subnet_name +'.*')| map(attribute='subnet.id') | list}}]"
#  when: "'public' in subnet_name"
#  with_items: "{{ vpc.extra_subnets }}"
#  loop_control:
#    loop_var: subnet_name

#- name: Create any extra gateways needed
#  include: extra_nat_gateways.yml
#  with_items: "{{ extra_public_subnets }}"
#  loop_control:
#    loop_var: extra_subnet_data

#- name: Find our extra private subnets
#  set_fact:
#    extra_public_subnets: "{{ extra_public_subnets|default([]) }} + [{{ subnets.results | selectattr('subnet.tags.Name', 'match', '^' + subnet_name +'.*')| map(attribute='subnet.id') | list}}]"
#  when: "'public' in subnet_name"
#  with_items: "{{ vpc.extra_subnets }}"
#  loop_control:
#    loop_var: subnet_name

- name: "Create route tables for extra public subnets"
  ec2_vpc_route_table:
    vpc_id: "{{ app_vpc.vpc_id }}"
    subnets: "{{ subnets.results | selectattr('subnet.tags.Name', 'match', '^' + subnet_name +'.*')| map(attribute='subnet.id') | list }}"
    state: present
    propagating_vgw_ids: []
    routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
    resource_tags: "{{ vpc.env_tags | combine({ 'Name': subnet_name|replace('-','_')  +'.' + opg_data.stack}) }}"
  with_items: "{{ vpc.extra_subnets }}"
  loop_control:
    loop_var: subnet_name
  when: "'public' in subnet_name"

- name: "Create route tables for extra private subnets"
  ec2_vpc_route_table:
    vpc_id: "{{ app_vpc.vpc_id }}"
    subnets: "{{ subnets.results | selectattr('subnet.tags.Name', 'match', '^' + subnet_name +'.*')| map(attribute='subnet.id') | list }}"
    state: present
    propagating_vgw_ids: []
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ nat_gw_id }}"
    resource_tags: "{{ vpc.env_tags | combine({ 'Name': subnet_name|replace('-','_')  +'.' + opg_data.stack}) }}"
  with_items: "{{ vpc.extra_subnets }}"
  loop_control:
    loop_var: subnet_name
  when: "'public' not in subnet_name"

