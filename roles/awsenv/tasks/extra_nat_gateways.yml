---

- name: Check if NAT gateway exists for extra public subnets
  ec2_vpc_nat_gateway_facts:
    filters:
      subnet-id: "{{ extra_subnet_data[0] }}"
      state: ['available']
  register: has_nat_gw

- block:
  - name: Create EIP for NAT gateway
    ec2_eip:
      in_vpc: true
      state: present
      release_on_disassociation: yes
    register: nat_eip

  - name: Create nat gateway
    ec2_vpc_nat_gateway:
      state: present
      subnet_id: "{{ extra_subnet_data[0] }}"
      allocation_id: "{{ nat_eip.allocation_id }}"
      wait: yes
    register: nat_gw

  - name: Set value of new gateway id for route table
    set_fact:
      nat_gw_id: "{{ nat_gw.nat_gateway_id }}"
    register: gw_change

  when: has_nat_gw.result | count < 1

- name: Set value of gateway id for route table
  set_fact:
    nat_gw_id: "{{ has_nat_gw.result[0].nat_gateway_id }}"
  when: has_nat_gw.result | count > 0
  register: gw_change

- name: "Create route table for extra subnets"
  ec2_vpc_route_table:
    vpc_id: "{{ app_vpc.vpc_id }}"
    subnets: "{{ subnets.results | selectattr('subnet.tags.Name', 'match', '^' + subnet_name +'.*')| map(attribute='subnet.id') | list }}"
    state: present
    propagating_vgw_ids: []
    routes:
      - dest: 0.0.0.0/0
        gateway_id: igw
    resource_tags: "{{ vpc.env_tags | combine({ 'Name': subnet_name|replace('-','_')  +'.' + opg_data.stack}) }}"
  with_items: "{{ vpc.extra_subnets }}"
  loop_control:
    loop_var: subnet_name