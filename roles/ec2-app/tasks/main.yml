---
#get some data from the shared vpc
- name:  Get vpc data for stack
  ec2_vpc_net_facts:
    filters:
      'tag:Name': "{{ [vpc_name, opg_data.domain]|join('.') }}"
  register: vpc_data
  check_mode: no
  tags:
    - always

- name: Set vpc id
  set_fact:
    vpc_id: "{{ vpc_data.vpcs.0.id }}"
  check_mode: no
  tags:
    - always

- name: Get list of subnets
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: subnet_data
  check_mode: no
  tags:
    - always

- name: Check if NAT gateway exists
  command: "aws ec2 describe-nat-gateways --filter Name=vpc-id,Values={{ vpc_id }} Name=state,Values=available --output json"
  register: has_nat_gw
  check_mode: no
  tags:
    - always
    - skip_ansible_lint

- name: Convert NAT GW from json to dict
  set_fact:
    has_nat_gw: "{{ has_nat_gw.stdout | from_json }}"
  check_mode: no
  tags:
    - always

- name: Extract NAT gateway public ip
  set_fact:
    nat_gw_public_ip: "{{ has_nat_gw.NatGateways.0.NatGatewayAddresses.0.PublicIp | default(None) }}"
  check_mode: no
  tags:
    - always

- name: Setup vars for playbook
  set_fact:
    private_subnets: "{{ subnet_data.subnets | selectattr('tags.Name', 'match', '^private.*')| map(attribute='id') | list }}"
    public_subnets: "{{ subnet_data.subnets | selectattr('tags.Name', 'match', '^public.*')| map(attribute='id') | list }}"
    vpc_id: "{{ vpc_data.vpcs.0.id }}"
  check_mode: no
  tags:
    - always

- name: Merge app-data and custom-app-data
  include_role:
    name: app-data
    tasks_from: main
  tags:
    - always

- block:
    - name: Run destroy tasks to remove stack
      include: destroy_stack.yml
  when: destroy_stack|default(False)|bool
  tags:
    - destroy

- block:
    - name: Create core stack components
      include: network.yml
      tags:
        - network
        - instances
        - rds
        - nfs

    - name: Lookup client security groups
      include: sg.yml
      tags:
        - always

    - name: Create rds security groups
      include_role:
        name: ec2-rds
        tasks_from: create-sg
      with_items: "{{ rds_dbs | default([]) }}"
      loop_control:
        loop_var: rds_instance_data
      when: rds_dbs is defined
      tags:
        - rds

    - name: Create dynamodb resources
      include_role:
        name: ec2-dynamodb
        tasks_from: create
      tags:
        - dynamodb

    - name: Create sns resources
      include: sns.yml
      when: sns_topics is defined
      tags:
        - sns
        - iam

    - name: Create s3 resources
      include_role:
        name: ec2-s3-bucket
        tasks_from: create
      tags:
        - s3

    - name: Create rds resources
      include_role:
        name: ec2-rds
        tasks_from: create
      with_items: "{{ rds_dbs | default([]) }}"
      loop_control:
        loop_var: rds_instance_data
      when: rds_dbs is defined
      tags:
        - rds

    - name: Create elasticache resources
      include: elasticache.yml
      with_items: "{{ elasticache_clusters | default([]) }}"
      loop_control:
        loop_var: ec_data
      when: elasticache_clusters is defined
      tags:
        - elasticache

    - name: Create IAM resources
      include: iam.yml
      when: iam_policy_data is defined
      tags:
        - iam

    - name: Create NFS infrastructure for app
      include: infra.yml
      with_items: "{{ app_data|selectattr('name', 'equalto', 'nfs')|list }}"
      loop_control:
        loop_var: appdata
      tags:
        - instances
        - nfs

    - name: Create NFS template resources
      include: nfs-templates.yml
      with_items: "{{ app_data|selectattr('type','undefined')|list }}"
      loop_control:
        loop_var: appdata
      tags:
        - nfs

    - name: Create infrastructure for app without NFS app
      include: infra.yml
      with_items: "{{ app_data|selectattr('type','undefined') | rejectattr('name', 'equalto', 'nfs') |list }}"
      loop_control:
        loop_var: appdata
      tags:
        - instances

    - name: Create database users
      include_role:
        name: ec2-rds
        tasks_from: create-users
      with_items: "{{ rds_dbs | default([]) }}"
      loop_control:
        loop_var: rds_instance_data
      when: rds_dbs is defined
      tags:
        - rds

    - name: Create cloudfront caches
      include_role:
        name: cloudfront
        tasks_from: create
      with_items: "{{ cloudfront | default([]) }}"
      when: cloudfront is defined
      tags:
        - cloudfront

  when: destroy_stack is undefined or not destroy_stack|bool
