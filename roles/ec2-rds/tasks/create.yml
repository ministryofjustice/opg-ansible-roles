---

- block:
    - name: register subnet group name
      set_fact:
        rds_subnet_group_name: "rds-private-subnets-{{ target }}-{{ rds_instance_data.db_name }}"

    - name: Check the existence of our RDS subnet group
      command: "aws rds describe-db-subnet-groups
               --db-subnet-group-name {{ rds_subnet_group_name }}"
      register: subnet_group_exists
      ignore_errors: True

    - name: Create RDS subnet group
      rds_subnet_group:
        state: present
        name: "{{ rds_subnet_group_name }}"
        description: "RDS Access for {{ rds_instance_data.db_name }} {{ target }} stacks"
        subnets: "{{ rds_instance_data.rds_subnets }}"
      when:
        - subnet_group_exists.stderr|trim|length > 1
  when: rds_instance_data.rds_subnets|default(False)

- block:
    - name: register subnet group name
      set_fact:
        rds_subnet_group_name: "rds-private-subnets-{{ vpc_name }}"

    - name: Check the existence of our subnet group
      command: "aws rds describe-db-subnet-groups
               --db-subnet-group-name {{ rds_subnet_group_name }}"
      register: subnet_group_exists
      ignore_errors: True

    - name: Create RDS subnet group
      rds_subnet_group:
        state: present
        name: "{{ rds_subnet_group_name }}"
        description: "RDS Access for {{ vpc_name }} stacks"
        subnets: "{{ private_subnets }}"
      when: subnet_group_exists.stderr|trim|length > 1

  when: not rds_instance_data.rds_subnets|default(False)

- name: Set uses_postgres
  set_fact:
    uses_postgres: "{{ rds_instance_data.db_engine|search('postgres') }}"

- name: Set uses_mysql
  set_fact:
    uses_mysql: "{{ rds_instance_data.db_engine|search('MySQL') }}"

- block:
    - name: Check the existence of our RDS parameter group
      command: " aws rds  describe-db-parameter-groups 
               --db-parameter-group-name postgres-db-params-{{ target }}"
      register: rds_postgres_parameter_group_exists
      ignore_errors: True
    
    - name: Create postgres rds parameter group
      rds_param_group:
        name: 'postgres-db-params-{{ target }}'
        state: present
        engine: "{{ postgres_params_engine|default('postgres9.3') }}"
        params: {'log_statement': 'none' }
        description: 'default postgres rds parameter group'
      register: postgres_param_group
      when:
        - not rds_postgres_parameter_group_exits|default(False)
        - rds_postgres_parameter_group_exists.stderr|trim|length > 1

    #params added using awscli due to https://github.com/boto/boto/pull/3533
    - name: Add params to group
      command: "aws rds modify-db-parameter-group --db-parameter-group-name postgres-db-params-{{ target }} --cli-input-json '{{ postgres_params|to_json }}'"
      register: rds_postgres_params
      failed_when: rds_postgres_params.rc != 0
      changed_when: rds_postgres_params.rc == 0

  when: uses_postgres is defined and uses_postgres

- block:
    - name: Create mysql rds parameter group
      rds_param_group:
        name: 'mysql-db-params-{{ target }}'
        params: {'log_statement': 'none' }
        state: present
        engine: "{{ mysql_params_engine|default('mysql5.7') }}"
        description: default mysql rds parameter group
      register: mysql_param_group

    #params added using awscli due to https://github.com/boto/boto/pull/3533
    - name: Add params to group
      command: "aws rds modify-db-parameter-group --db-parameter-group-name mysql-db-params-{{ target }} --cli-input-json '{{ mysql_params | to_json }}'"
      register: rds_mysql_params
      failed_when: rds_mysql_params.rc != 0
      changed_when: rds_mysql_params.rc == 0

  when: uses_mysql is defined and uses_mysql

- name: Pause for parameter groups to settle
  pause:
    minutes: 2
  when: rds_postgres_params | changed or rds_mysql_params | changed

- block:
    - name: Get RDS sg info
      ec2_group_facts:
        filters:
          vpc-id: "{{ vpc_id }}"
          group_name:
            - "{{ rds_instance_data.rds_sg.name + '-' + target }}"
      register: rds_sg_facts

    - name: Get RDS sg group id for current instance
      set_fact:
        rds_sg_id: "{{ rds_sg_facts.security_groups.0.group_id }}"

  when: rds_instance_data.rds_sg is defined

- assert:
    that:
      - "rds_instance_data.tags is defined"
      - "rds_instance_data.tags is not none"
    msg: "You must define tags for RDS {{ rds_instance_data.db_name + '-' + opg_data.stack  }}"

- name: Set performance_insights_version_check
  set_fact:
    performance_insights_version_check: "{{ rds_instance_data.engine_version | version_compare('10', '>=') }}"

- name: Show performance_insights_version_check
  debug:
    var=performance_insights_version_check

- name: Set performance_insights_command 
  set_fact:
    performance_insights_command: "{{ '--enable-performance-insights' if performance_insights_version_check and rds_instance_data.performance_insights else '' }}"

- name: Show performance_insights_command
  debug:
    var=performance_insights_command

- block:
    # Rds instance created via CLI due to ansible not currently supporting encryption
    - name: Create RDS instances
      command: "aws rds create-db-instance
                --db-name {{ rds_instance_data.db_name }}
                --db-instance-identifier {{ rds_instance_data.db_name + '-' + opg_data.stack  }}
                --storage-type {{ rds_instance_data.storage_type | default('gp2') }}
                --db-parameter-group-name {{ rds_instance_data.db_engine|lower + '-db-params-' + target }}
                --allocated-storage {{ rds_instance_data.intial_storage | default(10) }}
                --db-instance-class {{ rds_instance_data.instance_type | default('') }}
                --engine {{ rds_instance_data.db_engine | default('mariadb') }}
                --engine-version {{ rds_instance_data.engine_version | default('') }}
                --master-username {{ rds_instance_data.username }}
                --master-user-password {{ rds_instance_data.password }}
                --vpc-security-group-ids {{ rds_sg_id }}
                --db-subnet-group-name {{ rds_subnet_group_name }}
                --preferred-maintenance-window {{ rds_instance_data.maint_window }}
                --backup-retention-period {{ rds_instance_data.backup_retention }}
                --preferred-backup-window {{ rds_instance_data.backup_window }}
                --tags '{{ rds_instance_data.tags | to_json }}'
                --no-publicly-accessible
                --{{ rds_instance_data.multi_az | default ('no-multi-az') }}
                --storage-encrypted
                {{performance_insights_command}}"
      register: rds_creation_result
      failed_when: >
        rds_creation_result.rc != 0 and ('DBInstanceAlreadyExists' not in rds_creation_result.stderr)
      changed_when: rds_creation_result.rc == 0
  when: not rds_instance_data.iops|default(False)

- block:
    # Rds instance created via CLI due to ansible not currently supporting encryption
    - name: Create RDS instances
      command: "aws rds create-db-instance
                --db-name {{ rds_instance_data.db_name }}
                --db-instance-identifier {{ rds_instance_data.db_name + '-' + opg_data.stack  }}
                --storage-type {{ rds_instance_data.storage_type | default('gp2') }}
                --db-parameter-group-name {{ rds_instance_data.db_engine|lower + '-db-params-' + target }}
                --allocated-storage {{ rds_instance_data.intial_storage | default(10) }}
                --db-instance-class {{ rds_instance_data.instance_type | default('') }}
                --engine {{ rds_instance_data.db_engine | default('mariadb') }}
                --engine-version {{ rds_instance_data.engine_version | default('') }}
                --master-username {{ rds_instance_data.username }}
                --master-user-password {{ rds_instance_data.password }}
                --vpc-security-group-ids {{ rds_sg_id }}
                --db-subnet-group-name {{ rds_subnet_group_name }}
                --preferred-maintenance-window {{ rds_instance_data.maint_window }}
                --backup-retention-period {{ rds_instance_data.backup_retention }}
                --preferred-backup-window {{ rds_instance_data.backup_window }}
                --tags '{{ rds_instance_data.tags | to_json }}'
                --no-publicly-accessible
                --{{ rds_instance_data.multi_az | default ('no-multi-az') }}
                --iops {{ rds_instance_data.iops }}
                --storage-encrypted
                {{performance_insights_command}}"
      register: rds_creation_result
      failed_when: >
        rds_creation_result.rc != 0 and ('DBInstanceAlreadyExists' not in rds_creation_result.stderr)
      changed_when: rds_creation_result.rc == 0
  when: rds_instance_data.iops|default(False)

- name: get RDS instance facts
  rds:
    command: facts
    instance_name: "{{ rds_instance_data.db_name + '-' + opg_data.stack }}"
  register: rds_instance_facts
  until: rds_instance_facts.instance.status == "available"
  retries: 40
  delay: 60

- name: Create rds route 53 entry
  route53:
    command: create
    overwrite: yes
    record: "{{ rds_instance_data.private_dns + '.' + opg_data.stack }}.internal."
    zone: "{{ opg_data.stack }}.internal."
    hosted_zone_id: "{{ internal_dns_zone.set.zone_id }}"
    value: "{{ rds_instance_facts.instance.endpoint }}"
    type: CNAME
    private_zone: yes
    ttl: 300
